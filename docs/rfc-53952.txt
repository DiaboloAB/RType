EPITECH Rennes                                                    LARGEOT Morgan
                                                                 LARGEOT Maxence
                                                                   BOITEL Alexis
                                                                   DORIEL Arthur
                                                                 MABILLE Raphael
Document: rfc-53952.txt                                           EPITECH Rennes
                                                                    October 2024

                            R-Type Protocol

/==============================================================================\
|                                                                              |
|    This document is an Internet-Draft and is NOT provided in accordance      |
|    with Section 10 of RFC2026. The author grants the IETF no rights other    |
|    than the permission to publish it as an Internet-Draft.                   |
|                                                                              |
|    Internet-Drafts are working papers of the Internet Engineering Task       |
|    Force (IETF), its various areas, and working groups. Other organizations  |
|    may also release documents as Internet-Drafts.                            |
|                                                                              |
|    Internet-Drafts are temporary, with a maximum validity of six months.     |
|    They may be revised, replaced, or withdrawn at any time, so it is         |
|    inappropriate to use them as formal references or to cite them except     |
|    as "works in progress."                                                   |
|                                                                              |
|    The current list of Internet-Drafts is available at:                      |
|        http://www.ietf.org/ietf/1id-abstracts.txt                            |
|    The list of Internet-Draft Shadow Directories can be accessed at:         |
|        http://www.ietf.org/shadow.html.                                      |
|                                                                              |
\==============================================================================/

Abstract

    This memo is the official R-Type documentation of the network protocol.
    R-Type is a 3rd year project for EPITECH students that include
    implementation of an ECS, Game Engine and UDP network protocol.
    Distribution of this memo is unlimited.

LARGEOT                         Informational                           [Page 1]

                            R-Type Protocol                       October 2024


Table of Contents

  1. R-Type architecture.............................................2
  2. Client and server communication.................................2
  3. Packet header...................................................3
  4. Timestamp.......................................................3
  5. Packets payload.................................................3
      5.1  HiServer..................................................4
      5.2  HiClient..................................................4
      5.3  AdiosServer...............................................4
      5.4  Ping......................................................4
      5.5  CreateEntity..............................................5
      5.6  DestroyEntity.............................................5
      5.7  MoveEntity................................................5
      5.8  UpdateEntity..............................................6
      5.9  ClientEvents..............................................6
      5.10 PacketValidation..........................................6
  6. Security Considerations.........................................7
  7. More............................................................7


1. R-Type architecture

    The R-Type architecture is a classic client-server game architecture.
    All game logic is in the server. The client will display the
    information transmitted by the server. It will also transmit the player's
    events (movements, keybinds) as well as these actions to the server.


2. Communication between client and server

    Communication between the server and clients is carried out via the
    UDP protocol defined in RFC-768.
    
    When connecting to the server, a client must send an initial "HiServer" 
    packet, allowing the server to create a client entity and transmit the 
    client's actions to other connected clients.
    The server will send a positive or negative response with “HiClient” packet.
    This first packet is very important. If it is not received or invalid,
    the server will not take the client into account and will not be able 
    to process any further requests from the client.

    If the server does not receive any packets from the client for more
    than 4 seconds, the server will consider that the connection has been lost
    and close it.

LARGEOT                         Informational                           [Page 2]

                            R-Type Protocol                         October 2024

    The client must do the same as the server. If it does not receive any
    packets from the server for more than 4 seconds, the client must close the
    connection with the server.

    Good practice would be to send at least one "Ping" packet from the
    client to the server and vice versa every second.


3. Packet header

    Each packet contains a header. This header gives details on its size,
    its type, its sending date/hour and the size of its data.

    /----------------------------\
    | Name      | Size (in bits) |
    |-----------|----------------|
    | Length    | 32             |
    | Type      | 8              |
    | Timestamp | 64             |
    | Datasize  | 16             |
    \----------------------------/

    When reading packets, the Length parameter must be checked first to
    ensure that the entire Packet has been received. Each Packet defined
    in this document has a unique ID used in the Type parameter for
    identification upon receipt (example: HiServer -> type: 1).


4. Timestamp:

    The Timestamp field is a 64-bit integer representing the number of
    seconds that have elapsed since January 1, 1970, 00:00:00 UTC (the Unix epoch).
    This format is commonly referred to as the Unix timestamp.

    For example, a timestamp with the value `1700000000` would correspond
    to Semptember 14, 2023, 01:46:40 UTC.
    This timestamp allows precise measurement of when a packet was sent,
    and is ideal for time-sensitive applications such as latency calculation,
    synchronization, or packet ordering in communication protocols.
    
    Since the value is based on UTC, there are no concerns regarding time zones
    or daylight saving adjustments. The Timestamp is stored in seconds,
    meaning that the resolution is sufficient for most network communication
    scenarios where millisecond precision is not required.


5. Packet Payload

    In this part, we will see all the packets that can be used in this
    protocol. In each case, the description omits the headers described
    above. Each size of each element is specified and the total must be
    indicated in the DataSize header.
    
    Please note that in the following tables a TYPE element is specified.
    This corresponds to the TYPE of the header, which is therefore
    indicated for each packet.

LARGEOT                         Informational                           [Page 3]

                            R-Type Protocol                         October 2024

5.1 HiServer

    The client send an 'HiServer' packet to establish a connection
    with the server and wait for a packet 'HiClient' in response.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 1     |
    \---------------------------------------------------------/


5.2 HiClient

    In response of the 'HiServer' packet, the server send a
    'HiClient' Packet to tell the client that the connection
    is established.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 2     |
    \---------------------------------------------------------/


5.3 AdiosServer

    When a client quits, it first informs the server by sending 
    an 'AdiosServer' packet to prevent the server from continuing
    to send it any packets.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 3     |
    \---------------------------------------------------------/


5.4 Ping

    By sending this packet every second, the client informs 
    the server that the connection between them is alive,
    so they both can continue to send packets.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 4     |
    \---------------------------------------------------------/

LARGEOT                         Informational                           [Page 4]

                            R-Type Protocol                         October 2024 

5.5 CreateEntity
    
    To allow the display of an entity for all the clients, the
    server must send a 'CreateEntity' packet to associated
    clients. This packet is based on 4 parameters:

        - Network Id: Id of the entity to create in the Network.
                      (could cause issues if it was based on ECS ids)

        - Entity prefab path: Since each entity uses a prefab in the
                      ECS, we should specify its path.

        - x: position x on the screen where the entity is created.

        - y: position y on the screen where the entity is created.

    Each parameter is MANDATORY in this packet.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 5     |
    | Network Id                     | 32             |       |
    | Entity prefab path    		 | 8 * length     |       |
    | x                              | 32             |       |
    | y                              | 32             |       |
    \---------------------------------------------------------/


5.6 DestroyEntity

    To stop the display of an entity for all the client, the
    server must send a 'DestroyEntity' packet to associated
    clients. This packet is based on 1 parameter:

        - Network Id: Id of the entity to destroy in the Network.
                      (could cause issues if it was based on ECS ids)

    Each parameter is MANDATORY in this packet.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 6     |
    | Network Id                     | 32             |       |
    \---------------------------------------------------------/


5.7 MoveEntity

    To move the entity of the screen based on its direction
    for all the client, the server must send a 'MoveEntity'
    packet to associated clients. This packet is based on 5
    parameters:

    - Network Id: Id of the entity to move in the Network.
                      (could cause issues if it was based on ECS ids)

    - x: position x on the screen where the entity is located.
    
    - y: position y on the screen where the entity is located.

    - direction x: direction of the entity on x axis.

    - direction y: direction of the entity on y axis.

    /---------------------------------------------------------\
    | Name                           | Size (in bits) | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 7     |
    | Network Id                     | 32             |       |
    | x                              | 32             |       |
    | y                              | 32             |       |
    | direction x                    | 32             |       |
    | direction y                    | 32             |       |
    \---------------------------------------------------------/

LARGEOT                         Informational                           [Page 5]

                            R-Type Protocol                         October 2024 

5.8 UpdateEntity

    To update the entity of the screen based on the element
    we want to update, the server must send a 'UpdateEntity'
    packet to associated clients. This packet is based on 2
    parameters:

        - Network Id: Id of the entity to update in the Network.
                   (could cause issues if it was based on ECS ids)

        - Description: Precision of an action. For example, if the
                   server want to update a score, it sends
                   'UpdateEntity' packet with "score = value" as
                   description.

    /---------------------------------------------------------\
    | Name                           | Size (bits)    | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 8     |
    | Network Id                     | 32             |       |
    | Description                    | 8 * length     |       |
    \---------------------------------------------------------/


5.9 ClientEvents

   To tell the server that the client is doing a particular action,
    the client triggers an event based on 2 parameters:

        - IdEvent: For example, the client sets id to 1 to tell the
               server that he wants to move his entity.

        - Description: Precision of an action. For example, if the
                   client wants to move, he may specify its direction
                   ("left", "right", "down", "up").

    The Id is MANDATORY in this packet.
    The Description is OPTIONAL in this packet (null if not used).

    /---------------------------------------------------------\
    | Name                           | Size (in bits) | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 9     |
    | IdEvent                        | 8              |       |
    | Description                    | 8 * length     |       |
    \---------------------------------------------------------/


5.10 PacketValidation

    When a packet is sent, this packet wait for a validation
    that tells to the client as the server that the packet has
    been recived. This packet is based on 2 parameters:

        - PacketType: Type of the packet received.

        - PacketTimestamp: Timestamp of the packet received.

    Each parameter is MANDATORY in this packet.

    /---------------------------------------------------------\
    | Name                           | Size (in bits) | Value |
    |--------------------------------|----------------|-------|
    | Type                           | 8              | 10    |
    | PacketType                     | 8              |       |
    | PacketTimestamp                | 64             |       |
    \---------------------------------------------------------/

LARGEOT                         Informational                           [Page 6]

                            R-Type Protocol                         October 2024 

6. Security Considerations

    The UDP protocol does not provide confirmation of receipt of Packets,
    which is why it is important to carefully check the total length upon
    receipt.

    Every packets needs validation. To do that, when you receive one packets,
    send "PacketValidation" Packet with packet type and timestamp.

    In case of an error, for example an invalid packet, nothing should be
    returned.

7. More

    To see more documentation about network with it's implementation in the
    project, creation of personnalized packets, creation of events and example
    of communication; See the network section of the wiki:
    
    https://github.com/DiaboloAB/RType/wiki/Network

LARGEOT                         Informational                           [Page 7]
